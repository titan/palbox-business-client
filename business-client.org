* 程序框架

#+begin_src nim :exports code :noweb yes :mkdirp yes :tangle /dev/shm/business-client/src/business_client.nim
  import asyncdispatch, httpclient, json, logging, md5, posix, redis, sequtils, strfmt, strutils, times

  proc generate_pin(board: int, lock: int, cmd: int): int =
    result = (cast[int](cast[int64](epochTime().toInt() shr 2) mod 64) or (board shl 13) or (lock shl 8) or (cmd shl 6)) and 0xFFFF

  proc checking() {.async.} =
    let
      redis_client: AsyncRedis = await openAsync()
      taskkey = "business-task-queue"
    while true:
      let taskstr = await redis_client.rpop(taskkey)
      if taskstr == redisNil:
        discard posix.sleep(1)
      else:
        let task = try: parseJson(taskstr) except: nil
        if task != nil:
          let
            bsclient = newAsyncHttpClient()
            timestamp = epochTime().toInt()
            uid = task["uid"].getStr()
            reader = task["reader"].getInt()
            lock = task["lock"].getInt()
            door = task["door"].getInt()
            card_no_str = task["card-no"].getInt().format("-010")
            params = if lock == 0 and door == 0: "mb=" & uid & "&sw=" & $reader & "&t=" & $timestamp & "&u=" & card_no_str elif lock == 0: "mb=" & uid & "&sno=" & $door & "&sw=" & $reader & "&t=" & $timestamp & "&u=" & card_no_str else: "mb=" & uid & "&sno=" & $lock & "&sw=" & $reader & "&t=" & $timestamp & "&u=" & card_no_str
            path = if lock == 0 and door == 0: "swing/back" else: "swing/orsark"
            sign = toLowerAscii($toMD5(params & "&key=qbtstvvs05pyiwjj50uuddydho2srdlm"))
          bsclient.headers = newHttpHeaders({ "Content-Type": "application/x-www-form-urlencoded" })
          info "https://book.fengchaohuzhu.com/" & path
          let response = await bsclient.post("https://book.fengchaohuzhu.com/" & path, body = params & "&sign=" & sign)
          info params & "&sign=" & sign
          bsclient.close()

          info "Business system response status ", response.status, " to ", uid
          if response.status == "200 OK":
            let body = await response.body()
            let resp = try: parseJson(body) except: nil
            if resp != nil:
              info "Business system response ", $resp
              let
                tkey = "tasks." & uid
                audio = if lock == 0:
                          case resp["code"].getInt():
                            of 1: 10
                            of -318: 12
                            of -350: 12
                            of -208: 7
                            of -138: 8
                            of -83: 13
                            of -339: 13
                            of -340: 13
                            of -1: 13
                            of -79: 13
                            of -80: 14
                            else: 0
                        else:
                          case resp["code"].getInt():
                            of 1: 4
                            of -341: 5
                            of -137: 6
                            of -208: 7
                            of -135: 8
                            of -142: 9
                            of -83: 13
                            of -1: 13
                            of -4: 13
                            of -79: 6
                            of -80: 13
                            of -339: 13
                            of -340: 13
                            else: 0
              if audio != 0:
                let
                  pin = generate_pin(reader, audio, 0)
                  json = %*{"command": "play", "qos": ">=1", "speaker": reader, "audio": audio, "pin": pin, "expires-at": epochTime().toInt() + 10, "pin": pin, "status": "queued", "occurred-at": getDateStr() & " " & getClockStr()}

                await redis_client.multi()
                discard await redis_client.rpush(key = tkey, value = $json)
                discard await redis_client.expire(key = tkey, seconds = 86400)
                discard await redis_client.rpush(key = "tasklog." & $uid & "." & getDateStr(), value = $json)
                discard await redis_client.exec()

  proc serve() =
    var L = newConsoleLogger(fmtStr = "$levelid [$datetime] : ")
    addHandler(L)
    asyncCheck checking()
    run_forever()

  serve()
#+end_src
